#!/bin/python3
from uuid import uuid4
from datetime import datetime
"""BaseModel that defines all common attributes/methods for other classes"""

class BaseModel:
    """ Base Model """
    def __init__(self, *args, **kwargs):
        """instance initialization"""
        if kwargs:
            format_data ='%Y-%m-%dT%H:%M:%S.%f'
            for key, val in kwargs.items():
                if key != '__class__':
                    setattr(self, key, val)                    
                    if 'created_at' in kwargs or 'updated_at' in kwargs:
                        self.__dict__[key] = datetime.strptime(val,format_data)
                    else:
                        self.__dict__[k] = v
        else:
            self.id = str(uuid4())
            self.created_at = datetime.now()
            self.updated_at = datetime.now()

    def save(self):
        """Update the 'updated_at' attribute with the current datetime."""
        self.updated_at = datetime.now()


    def to_dict(self):
        """Return a dictionary representation of the object."""
        return {
            'id': self.id,
            'created_at': self.created_at,
            'updated_at': self.updated_at
        }

    def __str__(self):
        """Return the string representation of the object."""
        return "[{}] ({}) {}".format(
            self.__class__.__name__, self.id, str(self.to_dict())
        )
